APPENDIX 4: CODE FOR DATA ANALYSES.
All analyses were performed on linux, unless otherwise specified.
i) Reads were assembled using Shovill(v1.0.4) Used all default options including spade
assembler. Exceptions included use of trimmomatic and genome size of 5.5mb for E.coli.
for file in *_1.fastq.gz; do tag=${file%_1.fastq.gz}:
shovill --trim ON --gsize 5.5M --outdir “$tag” --R1
“$tag”_1.fastq.gz --R2 “$tag”_ 2.fastq.gz; done
ii) Estimating pairwise similarity matrix using Mash (v2.2.2)
mash sketch -o all *.fa
mash dist all.msh *.fa > mash_all.out
mash info all.msh > all.info
iii) Genome Annotation using Prokka (v1.11).
a) Annotating contig files generated by Shovill.(v1.0.4) and chosen reference genome.
for file in *.fa; do tag=${file%.fa}; prokka --prefix "$tag"
--locustag "$tag" --usegenus --genus Escherichia --outdir
05-06-2020_"$tag"_prokka --force --addgenes --rfam "$file";
done
b) Annotating reference strains
prokka --prefix NZ_CP030781.1 --locustag NZ_CP030781.1
--usegenus --genus Escherichia --outdir A_prokka --
force --addgenes --rfam A_1.fasta
prokka --prefix NC_00295.2 --locustag NC_00295.2 --
usegenus --genus Escherichia --outdir C_prokka --force
--addgenes --rfam C_1.fasta
prokka --prefix NZ_CP042942.1 --locustag NZ_CP042942.1 -
-usegenus --genus Escherichia --outdir B_prokka --force
--addgenes --rfam B_1.fasta
prokka --prefix NZ_CP053416.1 --locustag NZ_CP053416.1 -
-usegenus --genus Salmonella --outdir D_prokka --force
--addgenes --rfam D_1.fasta
prokka --prefix NC_010067.1 --locustag NC_010067.1 --
usegenus --genus Salmonella --outdir E_prokka --force -
-addgenes --rfam E_1.fasta
prokka --prefix NZ_CP032523.1 --locustag NZ_CP032523.1 -
-usegenus --genus Shigella --outdir F_prokka --force --
addgenes --rfam F_1.fasta
prokka --prefix NZ_CP037923.1 --locustag NZ_CP037923.1 -
-usegenus --genus Shigella --outdir G_prokka --force --
addgenes --rfam G_1.fasta
iv) Pan-genome prediction using Roary (v3.13.0) using gff files generated by Prokka (v1.11)
roary -e --mafft -p 8 *.gff
v) Alignment and variant calling using Snippy (v4.3.6) and removing recombination using
Gubbins (v2.3.4)
for file in *_1.fastq; do tag=${file%_1.fastq}; snippy ---
cpus 16 --outdir "$tag"_snps --ref ref.fasta --R1
"$tag"_1.fastq --R2 "$tag"_2.fastq;done
38
snippy--core --prefix core *_snps --ref ref.fasta
run_gubbins.py -p gubbins clean.full.aln
snp-sites --c gubbins.filtered_polymorphic_sites.fasta >
clean.core.aln
vi) Running Ariba (v2.11.1) for predicting virulence, plasmid antimicrobial resistance and
fimH genes/alleles. Also used it to confirm sequence type (MLST).
a) Resfinder database
ariba getref resfinder resfinder.out
ariba prepareref -f out.resfinder.fa -m out.resfinder.tsv
out.resfinder.prepareref
for file in *_1.fastq; do tag=${file%_1.fastq}; ariba run
out.resfinder.prepareref "$tag"_1.fastq "$tag"_2.fastq
"$tag"_out.run; done
b) Plasmidfinder database
wget
https://bitbucket.org/genomicepidemiology/plasmidfinder_d
b/raw/master/enterobacteriaceae.fsa
awk '$1~/^>/ {OFS="\t"; print
substr($1,2),0,0,".",".","."}' seqs.fa > seqs.tsv
ariba prepareref -f seqs.fa -m seqs.tsv OUT
for file in *_1.fastq; do tag=${file%_1.fastq}; ariba run
OUT "$tag"_1.fastq "$tag"_2.fastq "$tag"_plasmid_out.run;
done
c) Virulencefinder database
wget
https://bitbucket.org/genomicepidemiology/virulencefinder
_db/raw/master/virulence_e.coli.fsa
awk '$1~/^>/ {OFS="\t"; print
substr($1,2),0,0,".",".","."}' seqs.fa > seqs.tsv
ariba prepareref -f seqs.fa -m seqs.tsv vir
for file in *_1.fastq; do tag=${file%_1.fastq}; ariba
run vir "$tag"_1.fastq "$tag"_2.fastq "$tag"_vir_out.run;
done
d) pubMLST database
ariba pubmlstget "Escherichia coli#1" get_mlst (#1 is
acthman scheme 7 loci)
ariba prepareref -f seqs.fa -m seqs.tsv get_mlst
for file in *_1.fastq; do tag=${file%_1.fastq}; ariba
run get_mlst/ref_db "$tag"_1.fastq "$tag"_2.fastq
"$tag"_pubmlst_ariba_out
e) fimtyper database
wget
https://bitbucket.org/genomicepidemiology/fimtyper_db/src
/master/fimH.fsa
awk '$1~/^>/ {OFS="\t"; print
substr($1,2),0,0,".",".","."}' seqs.fa > seqs.tsv
ariba prepareref -f seqs.fa -m seqs.tsv fimH
39
for file in *_1.fastq; do tag=${file%_1.fastq}; ariba run
fimH "$tag"_1.fastq "$tag"_2.fastq "$tag"_fimH.run; done
vii) Using HMMER (v3.1b2) to search E. coli ST131 for efflux pumps and parsing results to
obtain highest score for each identified domain.
a) First using custom-built efflux database (proteins). Hmmsearch was performed
initially with no cut-off and then a cutoff of 0.0005
hmmbuild effluxproteins.hmm proteins
hmmsearch --tblout effluxproteinstable --domtblout
effluxdomainstable -A noE effluxproteins.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable2 --domtblout
effluxdomainstable2 -A 0.00005E -E 0.0005 effluxproteins.hmm
allaminoacids.fasta
b) Secondly, using Pfam profiles and internal cut-off recognition settings.
hmmsearch --tblout effluxproteinstable3_ACRtran --
domtblout effluxdomainstable3_ACRtran --cut_ga --noali
ACR_tran.hmm allaminoacids.fasta
hmmsearch --tblout effluxproteinstable4_ACRtran --
domtblout effluxdomainstable4_ACRtran --cut_nc --noali
ACR_tran.hmm allaminoacids.fasta
hmmsearch --tblout effluxproteinstable5_ACRtran --
domtblout effluxdomainstable5_ACRtran --cut_tc --noali
ACR_tran.hmm allaminoacids.fasta
hmmsearch --tblout effluxproteinstable6_EamA --domtblout
effluxdomainstable6_EamA -A EamA --cut_ga EamA.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable7_EamA --domtblout
effluxdomainstable7_EamA -A EamA --cut_nc EamA.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable8_EamA --domtblout
effluxdomainstable8_EamA -A EamA --cut_tc EamA.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable9_EmrE --domtblout
effluxdomainstable9_EmrE -A EmrE --cut_ga EmrE.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable10_EmrE --domtblout
effluxdomainstable10_EmrE -A EmrE --cut_nc EmrE.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable11_EmrE --domtblout
effluxdomainstable11_EmrE -A EmrE --cut_tc EmrE.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable12_MatE --domtblout
effluxdomainstable12_MatE -A MatE --cut_ga MatE.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable13_MatE --domtblout
effluxdomainstable13_MatE -A MatE --cut_nc MatE.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable14_MatE --domtblout
effluxdomainstable14_MatE -A MatE --cut_tc MatE.hmm
allaminoacids.fasta
40
hmmsearch --tblout effluxproteinstable15_MFS_1 --domtblout
effluxdomainstable15_MFS_1 -A MFS_1 --cut_ga MFS_1.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable16_MFS_1 --domtblout
effluxdomainstable16_MFS_1 -A MFS_1 --cut_nc MFS_1.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable17_MFS_1 --domtblout
effluxdomainstable17_MFS_1 -A MFS_1 --cut_tc MFS_1.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable18_MDR --domtblout
effluxdomainstable18_MDR -A MDR --cut_ga Multi_Drug_Res.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable19_MDR --domtblout
effluxdomainstable19_MDR -A MDR --cut_nc Multi_Drug_Res.hmm
allaminoacids.fasta
hmmsearch --tblout effluxproteinstable20_MDR --domtblout
effluxdomainstable20_MDR -A MDR --cut_tc Multi_Drug_Res.hmm
allaminoacids.fasta
c) Running hmmsearch on reference strains with internal cut-off recognition settings
for Pfam profiles.
hmmsearch --tblout tableref --domtblout tablerefd -A noE
effluxproteins.hmm refy.fasta
hmmsearch --tblout tableref_ACRtran --domtblout
tablerefd_ACRtran --cut_ga --noali ACR_tran.hmm refy.fasta
hmmsearch --tblout tableref_EamA --domtblout tablerefd_EamA -A
EamA --cut_ga EamA.hmm refy.fasta
hmmsearch --tblout tableref_EmrE --domtblout tablerefd_EmrE -A
EmrE --cut_ga EmrE.hmm refy.fasta
hmmsearch --tblout tableref_MatE --domtblout tablerefd_MatE -A
MatE --cut_ga MatE.hmm refy.fasta
hmmsearch --tblout tableref_MFS_1 --domtblout tablerefd_MFS_1
-A MFS_1 --cut_ga MFS_1.hmm refy.fasta
hmmsearch --tblout tableref_MDR --domtblout tablerefd_MDR -A
MDR --cut_ga Multi_Drug_Res.hmm refy.fasta
hmmsearch --tblout tableref --domtblout tablerefd -A noE
effluxproteins.hmm refy.fasta
hmmsearch --tblout tableref_ACRtran --domtblout
tablerefd_ACRtran --cut_tc --noali ACR_tran.hmm refy.fasta
hmmsearch --tblout tableref_EamA --domtblout tablerefd_EamA -A
EamA --cut_tc EamA.hmm refy.fasta
hmmsearch --tblout tableref_EmrE --domtblout tablerefd_EmrE -A
EmrE --cut_tc EmrE.hmm refy.fasta
hmmsearch --tblout tableref_MatE --domtblout tablerefd_MatE -A
MatE --cut_tc MatE.hmm refy.fasta
hmmsearch --tblout tableref_MFS_1 --domtblout tablerefd_MFS_1
-A MFS_1 --cut_tc MFS_1.hmm refy.fasta
hmmsearch --tblout tableref_MDR --domtblout tablerefd_MDR -A
MDR --cut_tc Multi_Drug_Res.hmm refy.fasta
hmmsearch --tblout tableref --domtblout tablerefd -A noE
effluxproteins.hmm refy.fasta
41
hmmsearch --tblout tableref_ACRtran --domtblout
tablerefd_ACRtran --cut_nc --noali ACR_tran.hmm refy.fasta
hmmsearch --tblout tableref_EamA --domtblout tablerefd_EamA -A
EamA --cut_nc EamA.hmm refy.fasta
hmmsearch --tblout tableref_EmrE --domtblout tablerefd_EmrE -A
EmrE --cut_nc EmrE.hmm refy.fasta
hmmsearch --tblout tableref_MatE --domtblout tablerefd_MatE -A
MatE --cut_nc MatE.hmm refy.fasta
hmmsearch --tblout tableref_MFS_1 --domtblout tablerefd_MFS_1
-A MFS_1 --cut_nc MFS_1.hmm refy.fasta
hmmsearch --tblout tableref_MDR --domtblout tablerefd_MDR -A
MDR --cut_nc Multi_Drug_Res.hmm refy.fasta
d) Parsing results to obtain highest score for each identified domain in R studio
(v4.0.1)
ed <- read.csv(“effluxdomains.csv”)
#Loading dplyr (v1.0.0)
library(dplyr)
#Removind duplicate values
ed2 <- distinct(ed)
#Make data numeric variable
ed2$V6 <- as.character.numeric_version(ed2$V6)
#Filter data using tidyverse package (v1.3.0) and filter
values using highest scoring variables eg bit score,
library(tidyverse)
ed3 <- ed2 %> group_by(V1) %>% summarise(code=min(V6))
viii) Using Ariba (v2.11.1) to find the contig coverage of efflux pump transporters. Efflux is a
file containing highest scoring efflux pump transporter genes identified from hmmsearch
and parsing results.
ariba prepareref --all_coding yes -f efflux efflux2
for file in *_1.fastq; do tag=${file%_1.fastq}; ariba run
efflux2 "$tag"_1.fastq "$tag"_2.fastq "$tag"_efflux; done
ix) Making a recombination- free core SNP tree using RAxML (v8.2.12) using 1000 boostraps
and GTR+ GAMMA model
raxmlHPC -f a -#1000 -m ASC_GTRGAMMA -asc--corr=lewis -s
clean.core.aln -n snptree8.tree -x 123 -p 123
x) Maximum likelihood trees of efflux pump transporter domains in E. coli ST131 and
reference strains with 500 bootstraps were produced using IQ-TREE (v1.6.1).
iqtree -s RND.out.fasta -nt AUTO -m LG+G -b 500 -pre RND
iqtree -s mate.out.fasta -nt AUTO -m LG+G -b 500 -pre MATE
iqtree -s ABC.out.fasta -nt AUTO -m JTT+G -b 500 -pre ABC
iqtree -s SMR.out.fasta -nt AUTO -m LG+G -b 500 -pre SMR
iqtree -s MFS.out.fas -nt AUTO -m LG+G -b 500 -pre MFS
xi) Bayesian trees of efflux pump transporter domains in E. coli ST131 and reference strains
with 500 bootstraps were produced using MrBayes (v3.2.7) in batch mode.
#The files contained an alignments followed by the following blocks respectively
#MATE
42
[begin mrbayes; log start filename=MATE2_mrbayes.log
replace; prset aamodelpr=mixed; lset rates=gamma
Ngammacat=4; set autoclose=yes; mcmc ngen=1000000
printfreq=1000 samplefreq=500 nchains=4 savebrlens=yes
starttree=random filename=MATE2_mrbayes.out; quit;end]
begin mrbayes; log start filename=MATE2_mrbayes.log replace;
sumt filename=MATE2_mrbayes.out burnin=500
contype=allcompat; end
#RND
[begin mrbayes; log start filename=RND2_mrbayes.log replace;
prset aamodelpr=mixed; lset rates=gamma Ngammacat=4; set
autoclose=yes; mcmc ngen=1000000 printfreq=1000
samplefreq=500 nchains=4 savebrlens=yes starttree=random
filename=RND2_mrbayes.out; quit;end]
begin mrbayes; log start filename=RND2_mrbayes.log replace;
sumt filename=RND2_mrbayes.out burnin=500 contype=allcompat;
end
#SMR
[begin mrbayes; log start filename=SMR2_mrbayes.log replace;
prset aamodelpr=mixed; lset rates=gamma Ngammacat=4; set
autoclose=yes; mcmc ngen=1000000 printfreq=1000
samplefreq=500 nchains=4 savebrlens=yes starttree=random
filename=SMR2_mrbayes.out; quit;end]
begin mrbayes; log start filename=SMR2_mrbayes.log replace;
sumt filename=SMR2_mrbayes.out burnin=500 contype=allcompat;
end
#MFS
[begin mrbayes; log start filename=MFS2_mrbayes.log replace;
prset aamodelpr=mixed; lset rates=gamma Ngammacat=4; set
autoclose=yes; mcmc ngen=1000000 printfreq=1000
samplefreq=500 nchains=4 savebrlens=yes starttree=random
filename=MFS2_mrbayes.out; quit;end]
begin mrbayes; log start filename=MFS2_mrbayes.log replace;
sumt filename=MFS2_mrbayes.out burnin=500 contype=allcompat;
end
#ABC
[begin mrbayes; log start filename=ABC2_mrbayes.log replace;
prset aamodelpr=mixed; lset rates=gamma Ngammacat=4; set
autoclose=yes; mcmc ngen=1000000 printfreq=1000
samplefreq=500 nchains=4 savebrlens=yes starttree=random
filename=ABC2_mrbayes.out; quit;end]
begin mrbayes; log start filename=ABC2_mrbayes.log replace;
sumt filename=ABC2_mrbayes.out burnin=500 contype=allcompat;
end
xii) Extracting regulatory regions 100 base pairs upstream of the regulatory regions and
clustering using UCLUST (v11.0.667_i86linux32)
#ABC
for file in *_abc; do tag=${file%_abc}; bedtools getfasta -
name -fo "$tag"_ abcregulation -fi "$tag".fna -bed
"$tag"_abc2; done
43
awk '/^>/{print ">" substr(FILENAME,1; next} 1'
*_abcregulation > abcregs.fasta
awk '/^>/{ seqlen=0; print; next; }
seqlen < 300 { if (seqlen + length($0) > 100)
 $0 = substr($0, 1, 100-seqlen);
 seqlen += length($0); print }' abcregs.fasta >
abcregs2.fasta
cdhit -i abcregs2.fata -o abcregs3 -c 0.95
#RND
for file in *_RND; do tag=${file%_RND}; bedtools getfasta -
name -fo "$tag"_ RNDregulation -fi "$tag".fna -bed
"$tag"_RND2; done
awk '/^>/{print ">" substr(FILENAME,1; next} 1'
*_RNDregulation > RNDregs.fasta
awk '/^>/{ seqlen=0; print; next; }
seqlen < 300 { if (seqlen + length($0) > 100)
 $0 = substr($0, 1, 100-seqlen);
 seqlen += length($0); print }' RNDregs.fasta >
RNDregs2.fasta
cdhit -i RNDregs2.fata -o RNDregs3 -c 0.95
#MFS
for file in *_MFS; do tag=${file%_MFS}; bedtools getfasta -
name -fo "$tag"_ MFSregulation -fi "$tag".fna -bed
"$tag"_MFS2; done
awk '/^>/{print ">" substr(FILENAME,1; next} 1'
*_MFSregulation > MFSregs.fasta
awk '/^>/{ seqlen=0; print; next; }
seqlen < 300 { if (seqlen + length($0) > 100)
 $0 = substr($0, 1, 100-seqlen);
 seqlen += length($0); print }' MFSregs.fasta >
MFSregs2.fasta
cdhit -i MFSregs2.fata -o MFSregs3 -c 0.95
#MATE
for file in *_MATE; do tag=${file%_MATE}; bedtools getfasta
-name -fo "$tag"_ MATEregulation -fi "$tag".fna -bed
"$tag"_MATE2; done
awk '/^>/{print ">" substr(FILENAME,1; next} 1'
*_MATEregulation > MATEregs.fasta
awk '/^>/{ seqlen=0; print; next; }
seqlen < 300 { if (seqlen + length($0) > 100)
 $0 = substr($0, 1, 100-seqlen);
 seqlen += length($0); print }' MATEregs.fasta >
MATEregs2.fasta
cdhit -i MATEregs2.fata -o MATEregs3 -c 0.95
#SMR
for file in *_SMR; do tag=${file%_SMR}; bedtools getfasta -
name -fo "$tag"_ SMRregulation -fi "$tag".fna -bed
"$tag"_SMR2; done
awk '/^>/{print ">" substr(FILENAME,1; next} 1'
*_SMRregulation > SMRregs.fasta
awk '/^>/{ seqlen=0; print; next; } 
44
seqlen < 300 { if (seqlen + length($0) > 100)
 $0 = substr($0, 1, 100-seqlen);
 seqlen += length($0); print }' SMRregs.fasta >
SMRregs2.fasta
#Clustering using UCLUST (v11.0.667_i86linux32)
for file in *regs2.fasta; do tag=${file%regs2.fasta};
usearch -cluster_fast "$tag"regs2.fasta -id 0.99 -centroids
"$tag"_99.fasta -uc "$tag"_99.uc; done
